# Docker Compose for AI Trading Robot
# Complete local development and testing environment
version: '3.9'

services:
  # =============================================================================
  # Core Trading Bot Service
  # =============================================================================
  trading-bot:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: ${BUILD_TARGET:-production}  # production, development, or gpu
    image: trading-bot:${VERSION:-latest}
    container_name: trading-bot
    hostname: trading-bot
    restart: unless-stopped
    environment:
      # Application settings
      - TRADING_ENV=${TRADING_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      
      # Database configuration
      - DATABASE_URL=postgresql://trader:${DB_PASSWORD:-tradingbot123}@postgres:5432/trading
      - DB_POOL_SIZE=20
      - DB_POOL_OVERFLOW=10
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - REDIS_POOL_SIZE=50
      
      # Kafka configuration
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CONSUMER_GROUP=trading-bot
      
      # API Keys (use secrets in production)
      - BINANCE_API_KEY=${BINANCE_API_KEY:-}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET:-}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - METRICS_PORT=9090
      
    ports:
      - "8080:8080"  # API
      - "8081:8081"  # WebSocket
      - "9090:9090"  # Metrics
    
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - trading-data:/app/data
      - trading-models:/app/models
      - trading-cache:/app/cache
      
      # For development - mount source code
      - ${DEV_MODE:-/dev/null}:${DEV_MODE:-/dev/null}:../../:/app:ro
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    
    networks:
      - trading-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # =============================================================================
  # PostgreSQL with TimescaleDB
  # =============================================================================
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: trading-postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=${DB_PASSWORD:-tradingbot123}
      - POSTGRES_DB=trading
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - TIMESCALEDB_TELEMETRY=off
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    
    networks:
      - trading-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d trading"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    hostname: redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    networks:
      - trading-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # =============================================================================
  # Apache Kafka for Event Streaming
  # =============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: trading-zookeeper
    hostname: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    
    networks:
      - trading-network
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: trading-kafka
    hostname: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    
    ports:
      - "29092:29092"
    
    volumes:
      - kafka-data:/var/lib/kafka/data
    
    networks:
      - trading-network
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # =============================================================================
  # Prometheus for Metrics Collection
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    hostname: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    
    ports:
      - "9091:9090"
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - trading-network
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # =============================================================================
  # Grafana for Visualization
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    depends_on:
      - prometheus
    
    networks:
      - trading-network
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # Elasticsearch for Log Storage
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: trading-elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - cluster.name=trading-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    
    ulimits:
      memlock:
        soft: -1
        hard: -1
    
    ports:
      - "9200:9200"
    
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    
    networks:
      - trading-network
    
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"[green|yellow]\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # =============================================================================
  # Kibana for Log Visualization
  # =============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: trading-kibana
    hostname: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - TELEMETRY_ENABLED=false
    
    ports:
      - "5601:5601"
    
    depends_on:
      elasticsearch:
        condition: service_healthy
    
    networks:
      - trading-network
    
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # =============================================================================
  # AlertManager for Alert Routing
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: trading-alertmanager
    hostname: alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--cluster.advertise-address=0.0.0.0:9093'
    
    ports:
      - "9093:9093"
    
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager-data:/alertmanager
    
    networks:
      - trading-network
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # pgAdmin for Database Management (Optional)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: trading-pgadmin
    hostname: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@trading-bot.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
    
    ports:
      - "5050:80"
    
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    
    networks:
      - trading-network
    
    profiles:
      - tools
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # RedisInsight for Redis Management (Optional)
  # =============================================================================
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: trading-redisinsight
    hostname: redisinsight
    restart: unless-stopped
    ports:
      - "8001:8001"
    
    volumes:
      - redisinsight-data:/db
    
    networks:
      - trading-network
    
    profiles:
      - tools
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# =============================================================================
# Networks
# =============================================================================
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  # Application volumes
  trading-data:
    driver: local
  trading-models:
    driver: local
  trading-cache:
    driver: local
  
  # Database volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Kafka volumes
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  
  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  alertmanager-data:
    driver: local
  
  # Tool volumes
  pgadmin-data:
    driver: local
  redisinsight-data:
    driver: local